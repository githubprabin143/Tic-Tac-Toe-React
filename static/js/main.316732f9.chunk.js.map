{"version":3,"sources":["index.js"],"names":["Square","number","value","onClick","className","id","Restart","Game","useState","Array","fill","squares","setSquares","isXNext","setIsXNext","nextSymbol","winner","possibleLines","i","length","a","b","c","name","line","calculateWinner","renderSquare","nextSquares","slice","getRandomColor","color","Math","floor","random","useEffect","timer","setInterval","colorsText","document","querySelectorAll","index","element","style","fontSize","clearInterval","aEle","querySelector","bEle","cEle","backgroundColor","isBoardFull","getStatus","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.316732f9.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nfunction Square({ number,value, onClick }) {\n  return (\n    <button className=\"square\" id={`square-${number}`} onClick={onClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Restart({ onClick }) {\n\n  return (\n    <button className=\"restart\" onClick={onClick}>\n      PLAY AGAIN\n    </button>\n  );\n}\n\nfunction Game() {\n  const [ squares, setSquares ] = useState(Array(9).fill(null));\n  const [ isXNext, setIsXNext ] = useState(true);\n  const nextSymbol = isXNext ? \"X\" : \"O\";\n  const winner = calculateWinner(squares);\n  useEffect(() => {\n    const timer = setInterval(() => {\n      if(winner){\n        var colorsText = document.querySelectorAll(\"#colorsText\");\n        for (let index = 0; index < colorsText.length; index++) {\n          const element = colorsText[index];\n          element.style.color =getRandomColor();\n          element.style.fontSize='40px'\n        }\n      }\n  \n    }, 500);\n    // Specify how to clean up after this effect:\n    return function cleanup() {\n      clearInterval(timer);\n    };\n  });\n  function getStatus() {\n    if (winner) {\n      const [a, b, c] = winner.line;\n      const aEle =  document.querySelector(`#square-${a}`)\n      const bEle =  document.querySelector(`#square-${b}`)\n      const cEle =  document.querySelector(`#square-${c}`)\n      aEle.style.backgroundColor ='#00802b';\n      bEle.style.backgroundColor ='#00802b';\n      cEle.style.backgroundColor ='#00802b';\n      return \"Winner: \" + winner.name;\n    } else if (isBoardFull(squares)) {\n      return \"Draw!\";\n    } else {\n      return \"Next player: \" + nextSymbol;\n    }\n  }\n\n  function renderSquare(i) {\n    return (\n      <Square\n        number={i}\n        value={squares[i]}\n        onClick={() => {\n          if (squares[i] != null || winner != null) {\n            return;\n          }\n          const nextSquares = squares.slice();\n          nextSquares[i] = nextSymbol;\n          setSquares(nextSquares);\n\n          setIsXNext(!isXNext); // toggle turns\n        }}\n      />\n    );\n  }\n\n  function getRandomColor() {\n    var letters = \"0123456789ABCDEF\";\n    var color = \"#\";\n    for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n\n  function renderRestartButton() {\n    return (\n      <Restart\n        onClick={() => {\n          var colorsText = document.querySelectorAll(\"#colorsText\");\n          for (let index = 0; index < colorsText.length; index++) {\n            const element = colorsText[index];\n            element.style.color ='black'\n          }\n          if(winner){\n            const [a, b, c] = winner.line;\n            const aEle =  document.querySelector(`#square-${a}`)\n            const bEle =  document.querySelector(`#square-${b}`)\n            const cEle =  document.querySelector(`#square-${c}`)\n            aEle.style.backgroundColor ='#7299a8';\n            bEle.style.backgroundColor ='#7299a8';\n            cEle.style.backgroundColor ='#7299a8';\n          }\n        \n          setSquares(Array(9).fill(null));\n          setIsXNext(true);\n        }}\n      />\n    );\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <div className=\"board-row\">\n            {renderSquare(0)}\n            {renderSquare(1)}\n            {renderSquare(2)}\n          </div>\n          <div className=\"board-row\">\n            {renderSquare(3)}\n            {renderSquare(4)}\n            {renderSquare(5)}\n          </div>\n          <div className=\"board-row\">\n            {renderSquare(6)}\n            {renderSquare(7)}\n            {renderSquare(8)}\n          </div>\n        </div>\n        <div className=\"game-info\" id=\"colorsText\">{getStatus()}</div>\n        <div className=\"restart-button\">{renderRestartButton()}</div>\n      </div>\n    </div>\n  );\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n  const possibleLines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  // go over all possibly winning lines and check if they consist of only X's/only O's\n  for (let i = 0; i < possibleLines.length; i++) {\n    const [a, b, c] = possibleLines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n \n      return {name:squares[a],line:possibleLines[i]}\n    }\n  }\n  return null;\n}\n\nfunction isBoardFull(squares) {\n  for (let i = 0; i < squares.length; i++) {\n    if (squares[i] == null) {\n      return false;\n    }\n  }\n  return true;\n}"],"sourceRoot":""}